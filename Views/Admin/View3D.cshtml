@{
	Layout = null;
	var modelUrl = ViewData["ModelUrl"] as string;
	var note = ViewData["Note"] as string;
	var customizationData = @Html.Raw(ViewData["Customization"]);
}
@model ProductEditViewModel

<head>
	<base href="~/" />
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - PetalOrSomething</title>
	<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
	<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/PetalOrSomething.styles.css" asp-append-version="true" />
	<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>
<style>
	body {
		overflow: hidden;
	}

	#myCanvas {
		position: absolute;
		top: 0;
		left: 0;
		display: block;
		width: 100%;
		height: calc(100% - 100px);
		overflow: hidden;
	}

	#mainContainer {
		display: flex;
		flex: 1;
	}

	#toolbox {
		position: absolute;
		top: 55px;
		left: 5px;
		border-radius: 20px;
		z-index: 999;
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		padding: 10px 15px;
		background-color: #2c2c2c;
		color: white;
		font-family: "Roboto", Arial, sans-serif;
		border-left: 2px solid #444;
		min-width: 150px;
		max-width: 250px;
		height: 50vh;
		box-shadow: -2px 0px 8px rgba(0, 0, 0, 0.3);
		padding-top: 25px;
		overflow-y: auto;
		overflow-x: hidden;
		scrollbar-width: thin;
		scrollbar-color: #444 #2c2c2c;
	}

	*::-webkit-scrollbar {
		width: 8px;
	}

	*::-webkit-scrollbar-thumb {
		background-color: #444;
		border-radius: 4px;
	}

	*::-webkit-scrollbar-track {
		background-color: #2c2c2c;
	}

	#controls {
		display: flex;
		flex-direction: column;
		gap: 5px;
		width: 100%;
	}

	.tool-btn {
		display: flex;
		align-items: center;
		gap: 10px;
		background-color: #3a3a3a;
		color: white;
		border: none;
		padding: 10px 15px;
		border-radius: 8px;
		cursor: pointer;
		font-size: 16px;
		transition: background-color 0.3s ease;
		text-align: left;
	}

	.tool-btn:hover {
		background-color: #505050;
	}

	.tool-btn i {
		font-size: 18px;
	}

	.slider-container {
		display: flex;
		align-items: center;
		justify-content: space-between;
		gap: 10px;
		width: 100%;
	}

	input[type="range"] {
		width: 100%;
		cursor: pointer;
		background: none;
		appearance: none;
		border-radius: 5px;
	}

	input[type="range"]::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 15px;
		height: 15px;
		border-radius: 50%;
		background: #fff;
		border: 2px solid #3a3a3a;
	}

	input[type="range"]::-webkit-slider-runnable-track {
		background: #555;
		height: 4px;
		border-radius: 2px;
	}

	.tool-btn span {
		flex-grow: 1;
	}

	#commandHelper {
		position: absolute;
		top: 55px;
		right: 10px;
		background-color: rgba(0, 0, 0, 0.7);
		color: white;
		padding: 10px 15px;
		border-radius: 8px;
		font-family: "Roboto", Arial, sans-serif;
		z-index: 10;
	}

	#commandHelper h2 {
		font-size: 14px;
		margin-bottom: 10px;
	}

	#commandHelper ul {
		list-style-type: none;
		padding-left: 0;
		font-size: 12px;
	}

	#commandHelper li {
		margin-bottom: 8px;
	}

	#meshList {
		margin-top: 15px;
		width: 100%;
	}

	#meshList label {
		color: white;
		font-size: 16px;
		margin-bottom: 8px;
		display: block;
	}

	#meshSelect {
		background-color: #3a3a3a;
		color: white;
		border: none;
		padding: 10px;
		border-radius: 8px;
		font-size: 16px;
		cursor: pointer;
		margin-top: 10px;
		width: 100%;
	}

	#meshSelect:hover {
		background-color: #505050;
	}



	.mesh-item {
		background-color: #505050;
		color: white;
		padding: 10px;
		border-radius: 8px;
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

	.mesh-item:hover {
		background-color: #616161;
	}

	.mesh-item.selected {
		background-color: #3498db;
		color: white;
	}

	#colorPickerContainer {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 10px;
		background-color: #3a3a3a;
		border-radius: 8px;
		box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
		width: 250px;
	}

	#colorPickerContainer label {
		font-size: 14px;
		font-weight: 600;
		color: white;
		margin-right: 10px;
		text-align: left;
	}

	#colorPicker {
		-webkit-appearance: none;
		appearance: none;
		width: 35px;
		height: 35px;
		border: none;
		border-radius: 50%;
		cursor: pointer;
		background-color: transparent;
		padding: 0;
		outline: none;
	}

	#colorPicker:focus {
		outline: none;
		box-shadow: 0 0 3px 2px rgba(0, 123, 255, 0.5);
	}

	#flowerModelList {
		list-style-type: none;
		padding: 0;
		margin-top: 20px;
	}

	#flowerModelList li {
		padding: 10px;
		cursor: pointer;
		border: 1px solid #666;
		margin-bottom: 5px;
		border-radius: 5px;
		text-align: center;
		background-color: #3b3b3b;
	}

	#flowerModelList li:hover {
		background-color: #555;
		/* Hover effect for items */
	}

	@* .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
    } *@

	.modal-content {
		background-color: #FFFFFFFF;
		border-radius: 10px;
		width: 80%;
		max-width: 1000px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	}

	.close-btn {
		float: right;
		font-size: 24px;
		font-weight: bold;
		cursor: pointer;
	}

	.asset-grid {
		margin: 20px;
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: 20px;
		margin-top: 20px;
	}

	@* .asset-item {
        padding: 10px;
        border-radius: 8px;
        text-align: center;
        color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        border: 2px solid #888;
    }

    .asset-info h4 {
        font-size: 18px;
        margin: 10px 0;
    }

    .asset-info p {
        font-size: 16px;
        color: #00ff00;
    }

    .add-asset-btn {
        background-color: #00ff00;
        color: #333;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .add-asset-btn:hover {
        background-color: #33ff33;
    }

    .model-viewer {
        width: 100%;
        height: 200px;
        border-radius: 8px;
    } *@

	@@media (max-width: 576px) {
		.asset-grid {
			grid-template-columns: repeat(1, 1fr);
		}

		#commandHelperContainer {
			display: none !important;
		}
	}

	@@media (max-width: 768px) {
		.asset-grid {
			grid-template-columns: repeat(2, 1fr);
		}

		#commandHelperContainer {
			display: none !important;
		}
	}

	@@media (min-width: 769px) {


		.asset-grid {
			grid-template-columns: repeat(4, 1fr);
		}
	}

	#mobileControls {
		position: fixed;
		left: 0;
		bottom: 0;
		width: 100%;
		background-color: #333;
		display: flex;
		overflow-x: auto;
		padding: 10px 5px;
		box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.3);
		z-index: 1000;
		scrollbar-width: thin;
		scrollbar-color: #444 #2c2c2c;
	}

	#mobileControls button {
		flex: 0 0 auto;
		margin: 0 5px;
		padding: 10px 15px;
		font-size: 14px;
		color: #fff;
		background-color: #444;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		white-space: nowrap;

	}

	#mobileControls button:hover {
		background-color: #555;
	}


	#commandHelperContainer h3 {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 10px;
	}

	#toggleCommandHelper {
		background-color: #444;
		color: #fff;
		border: none;
		padding: 5px 10px;
		border-radius: 5px;
		cursor: pointer;
		font-size: 14px;
	}

	#commandHelper {
		transition: max-height 3s ease;
		overflow: hidden;
	}

	.hidden {
		max-height: 50;
		opacity: 1;
	}

	.navigator {
		position: absolute;
		top: 0;
		right: 0;
		z-index: 999;
		display: flex;
		background-color: #2c2c2c;
		height: 50px;
		width: 100vw;
		align-items: center;
		justify-content: space-between;
		padding: 0 20px;
		box-sizing: border-box;
	}

	.navigator>ul {
		list-style: none;
		margin: 0;
		padding: 0;
		display: flex;
		gap: 10px;
		justify-content: center;
		align-items: center;
	}

	.nav-btn,
	.nav-control {
		display: flex;
		justify-content: space-between;
		width: 100%;
		background-color: transparent;
		border: none;
		color: #fff;
		cursor: pointer;
		font-size: 16px;
		display: flex;
		align-items: center;
		gap: 1px;
	}

	.nav-btn:hover,
	.dropdown-item:hover {
		color: #00ff00;
	}

	.dropdown {
		position: relative;
	}

	.dropdown-menu {
		display: none;
		position: absolute;
		background-color: #333;
		border: 1px solid #555;
		padding: 5px 0;
		list-style: none;
		z-index: 10;
		min-width: 300px;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.dropdown-menu li {
		padding: 5px 15px;
		background-color: #444;
		height: 40px;
		display: flex;
		justify-content: flex-start;
		align-items: center;
	}

	.dropdown-menu li:hover {
		background-color: #666;
	}

	.dropdown-item {
		background: none;
		border: none;
		color: #fff;
		width: 100%;
		text-align: left;
		cursor: pointer;
	}

	@* .dropdown:hover .dropdown-menu,
    .dropdown-menu:hover {
        display: block !important;
    } *@

	@@media (max-width: 768px) {
		.navigator {
			flex-direction: column;
			height: auto;
			align-items: flex-start;
			padding: 10px;
		}

		.navigator>ul {
			flex-direction: column;
			width: 100%;
			gap: 5px;
		}

		.navigator>ul li {
			width: 100%;
		}

		.dropdown-menu {
			position: static;
			box-shadow: none;
			border: none;
			background-color: transparent;
			padding: 0;
		}

		.dropdown-menu li {
			padding: 10px 0;
			border-bottom: 1px solid #555;
			padding-left: 10px;
		}

		.dropdown-btn::after {
			content: '▼';
			font-size: 12px;
			margin-left: 5px;
		}
	}
</style>

<body>
	<script src="https://unpkg.com/three@0.139.2/build/three.min.js"></script>
	<script src="https://unpkg.com/three@0.139.2/examples/js/loaders/GLTFLoader.js"></script>
	<script src="https://unpkg.com/three@0.139.2/examples/js/controls/OrbitControls.js"></script>
	<script src="https://unpkg.com/three@0.139.2/examples/js/exporters/GLTFExporter.js"></script>


	<div id="mainContainer">
		<nav class="navigator">
			<ul>
				<li class="dropdown">
					<button class="nav-btn dropdown-btn" onclick="toggleDropdown('fileDropdown')">
						<span>File</span>
					</button>
					<ul class="dropdown-menu" id="fileDropdown">
						<li>
							<button id="saveDesignBtn" class="nav-btn" onclick="saveMeshList()">
								Save Design
							</button>
						</li>
						<li>
							<a href="@Url.Action("Index", "Home")" class="nav-btn" style="text-decoration: none;">
								Close
							</a>
						</li>
					</ul>
				</li>
				<li class="dropdown">
					<button class="nav-btn dropdown-btn" onclick="toggleDropdown('toolsDropdown')">
						<span>Tools</span>
					</button>
					<ul class="dropdown-menu" id="toolsDropdown">
						<li>
							<div class="nav-control">
								<label for="colorPickerBackground">Background:</label>
								<input class="w-25" type="color" id="colorPickerBackground" value="#cccccc" />
							</div>
						</li>
						<li>
							<button id="resetBtn" class="nav-btn">
								<span>Reset View</span>
							</button>
						</li>
						<li>
							<button id="toggleGrid" class="nav-btn">
								<span>Toggle Grid</span>
							</button>
						</li>
					</ul>
				</li>
			</ul>

		</nav>

		<div id="canvasContainer">
			<canvas id="myCanvas"></canvas>
		</div>
	</div>

	<div id="commandHelperContainer">
		<div id="commandHelper">
			<ul>
				<li><strong>Note:</strong></li>
				<li>@note</li>
			</ul>
		</div>
	</div>
</body>

</html>
<script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
	let scene,
		camera,
		renderer,
		model,
		controls,
		selectedMesh,
		gridHelper,
		originalSize,
		meshes = [];

	let selectedOutline = null;
	let xHelper, yHelper, zHelper;
	let dLabel, sLabel, qLabel, aLabel, wLabel, eLabel;
	let raycaster,
		mouse,
		isDragging = false,
		offset = new THREE.Vector3();
	let moveSpeed = 1;

	function toggleDropdown(dropdownId) {
		if (dropdownId !== "toolsDropdown") document.getElementById("toolsDropdown").style.display = "none";
		if (dropdownId !== "fileDropdown") document.getElementById("fileDropdown").style.display = "none";

		const dropdownMenu = document.getElementById(dropdownId);
		if (dropdownMenu.style.display === 'block') {
			dropdownMenu.style.display = 'none';
		} else {
			dropdownMenu.style.display = 'block';

		}
	}

	function saveMeshList() {
		const blob = new Blob(['@customizationData'], { type: 'application/json' });
		const link = document.createElement('a');
		link.href = URL.createObjectURL(blob);
		link.download = 'meshes.json';
		link.click();
	}

	function init() {
		scene = new THREE.Scene();
		camera = new THREE.PerspectiveCamera(
			75,
			window.innerWidth / window.innerHeight,
			0.1,
			1000
		);
		camera.position.set(0, 0, 50);
		camera.fov = 75;
		camera.updateProjectionMatrix();
		scene.add(camera);

		renderer = new THREE.WebGLRenderer({
			antialias: true,
			canvas: document.querySelector("#myCanvas"),
		});
		renderer.setSize(window.innerWidth, window.innerHeight);
		document.body.appendChild(renderer.domElement);

		const gridSize = 50;
		const divisions = 50;

		gridHelper = new THREE.GridHelper(gridSize, divisions);
		gridHelper.material.linewidth = 2;
		gridHelper.setColors(0x888888, 0x444444);
		scene.add(gridHelper);
		camera.position.y = 10;
		camera.position.z = 10;
		camera.position.x = 10;

		raycaster = new THREE.Raycaster();
		mouse = new THREE.Vector2();

		controls = new THREE.OrbitControls(camera, renderer.domElement);
		controls.maxPolarAngle = Math.PI * 0.5;
		controls.minDistance = 0.1;
		controls.maxDistance = 100;
		controls.autoRotate = false;

		scene.add(new THREE.AmbientLight(0xcccccc, 1));

		const light = new THREE.DirectionalLight(0xffffff, 1);
		light.position.set(10, 10, 10);
		scene.add(light);
		scene.background = new THREE.Color(0xeeeeee);

		const loader = new THREE.GLTFLoader();
		loader.load("@modelUrl", (gltf) => {
			model = gltf.scene;
			model.scale.set(1, 1, 1);
			model.position.set(0, 0, 0);
			scene.add(model);
			console.log("Model Loaded Successfully");
		});


		window.addEventListener('resize', onWindowResize);
		animate();
	}

	function onWindowResize() {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(window.innerWidth, window.innerHeight);
	}

	function animate() {
		requestAnimationFrame(animate);
		controls.update();
		renderer.render(scene, camera);
	}


	document
		.getElementById("colorPickerBackground")
		.addEventListener("input", function (event) {
			scene.background = new THREE.Color(event.target.value);
		});

	document
		.getElementById("resetBtn")
		.addEventListener("click", () => {
			camera.position.y = 10;
			camera.position.z = 10;
			camera.position.x = 10;
			camera.fov = 75;
			controls.update();
		});

	document
		.getElementById("toggleGrid")
		.addEventListener("click", () => {
			if (scene.children.includes(gridHelper)) {
				scene.remove(gridHelper);
			} else {
				scene.add(gridHelper);
			}
		});


	init();


</script>
