@{
    Layout = null;
    var ids = ViewData["Ids"] as string;
    var name = ViewData["Name"] as string;
    var quantity = ViewData["Quantity"] as string;
    var note = ViewData["Note"] as string;
    var customizationData = @Html.Raw(ViewData["Customization"]);
}
@model ProductEditViewModel

<head>
    <base href="~/" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - PetalOrSomething</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/PetalOrSomething.styles.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>
<style>
    body {
        overflow: hidden;
    }

    #myCanvas {
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        width: 100%;
        height: calc(100% - 100px);
        overflow: hidden;
    }

    #mainContainer {
        display: flex;
        flex: 1;
    }

    #toolbox {
        position: absolute;
        top: 55px;
        left: 5px;
        border-radius: 20px;
        z-index: 999;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding: 10px 15px;
        background-color: #2c2c2c;
        color: white;
        font-family: "Roboto", Arial, sans-serif;
        border-left: 2px solid #444;
        min-width: 150px;
        max-width: 250px;
        height: 50vh;
        box-shadow: -2px 0px 8px rgba(0, 0, 0, 0.3);
        padding-top: 25px;
        overflow-y: auto;
        overflow-x: hidden;
        scrollbar-width: thin;
        scrollbar-color: #444 #2c2c2c;
    }

    *::-webkit-scrollbar {
        width: 8px;
    }

    *::-webkit-scrollbar-thumb {
        background-color: #444;
        border-radius: 4px;
    }

    *::-webkit-scrollbar-track {
        background-color: #2c2c2c;
    }

    #controls {
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 100%;
    }

    .tool-btn {
        display: flex;
        align-items: center;
        gap: 10px;
        background-color: #3a3a3a;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
        text-align: left;
    }

    .tool-btn:hover {
        background-color: #505050;
    }

    .tool-btn i {
        font-size: 18px;
    }

    .slider-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
        width: 100%;
    }

    input[type="range"] {
        width: 100%;
        cursor: pointer;
        background: none;
        appearance: none;
        border-radius: 5px;
    }

    input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 15px;
        height: 15px;
        border-radius: 50%;
        background: #fff;
        border: 2px solid #3a3a3a;
    }

    input[type="range"]::-webkit-slider-runnable-track {
        background: #555;
        height: 4px;
        border-radius: 2px;
    }

    .tool-btn span {
        flex-grow: 1;
    }

    #commandHelper {
        position: absolute;
        top: 55px;
        right: 10px;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 10px 15px;
        border-radius: 8px;
        font-family: "Roboto", Arial, sans-serif;
        z-index: 10;
    }

    #commandHelper h2 {
        font-size: 14px;
        margin-bottom: 10px;
    }

    #commandHelper ul {
        list-style-type: none;
        padding-left: 0;
        font-size: 12px;
    }

    #commandHelper li {
        margin-bottom: 8px;
    }

    #meshList {
        margin-top: 15px;
        width: 100%;
    }

    #meshList label {
        color: white;
        font-size: 16px;
        margin-bottom: 8px;
        display: block;
    }

    #meshSelect {
        background-color: #3a3a3a;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 8px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 10px;
        width: 100%;
    }

    #meshSelect:hover {
        background-color: #505050;
    }



    .mesh-item {
        background-color: #505050;
        color: white;
        padding: 10px;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .mesh-item:hover {
        background-color: #616161;
    }

    .mesh-item.selected {
        background-color: #3498db;
        color: white;
    }

    #colorPickerContainer {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px;
        background-color: #3a3a3a;
        border-radius: 8px;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
        width: 250px;
    }

    #colorPickerContainer label {
        font-size: 14px;
        font-weight: 600;
        color: white;
        margin-right: 10px;
        text-align: left;
    }

    #colorPicker {
        -webkit-appearance: none;
        appearance: none;
        width: 35px;
        height: 35px;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        background-color: transparent;
        padding: 0;
        outline: none;
    }

    #colorPicker:focus {
        outline: none;
        box-shadow: 0 0 3px 2px rgba(0, 123, 255, 0.5);
    }

    #flowerModelList {
        list-style-type: none;
        padding: 0;
        margin-top: 20px;
    }

    #flowerModelList li {
        padding: 10px;
        cursor: pointer;
        border: 1px solid #666;
        margin-bottom: 5px;
        border-radius: 5px;
        text-align: center;
        background-color: #3b3b3b;
    }

    #flowerModelList li:hover {
        background-color: #555;
    }

    .modal-content {
        background-color: #FFFFFFFF;
        border-radius: 10px;
        width: 80%;
        max-width: 1000px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .close-btn {
        float: right;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

    .asset-grid {
        margin: 20px;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    @@media (max-width: 576px) {
        .asset-grid {
            grid-template-columns: repeat(1, 1fr);
        }

        #commandHelperContainer {
            display: none !important;
        }
    }

    @@media (max-width: 768px) {
        .asset-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        #commandHelperContainer {
            display: none !important;
        }
    }

    @@media (min-width: 769px) {


        .asset-grid {
            grid-template-columns: repeat(4, 1fr);
        }
    }

    #mobileControls {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #333;
        display: flex;
        overflow-x: auto;
        padding: 10px 5px;
        box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        scrollbar-width: thin;
        scrollbar-color: #444 #2c2c2c;
    }

    #mobileControls button {
        flex: 0 0 auto;
        margin: 0 5px;
        padding: 10px 15px;
        font-size: 14px;
        color: #fff;
        background-color: #444;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        white-space: nowrap;

    }

    #mobileControls button:hover {
        background-color: #555;
    }


    #commandHelperContainer h3 {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    #toggleCommandHelper {
        background-color: #444;
        color: #fff;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    #commandHelper {
        transition: max-height 3s ease;
        overflow: hidden;
    }

    .hidden {
        max-height: 50;
        opacity: 1;
    }

    .navigator {
        position: absolute;
        top: 0;
        right: 0;
        z-index: 999;
        display: flex;
        background-color: #2c2c2c;
        height: 50px;
        width: 100vw;
        align-items: center;
        justify-content: space-between;
        padding: 0 20px;
        box-sizing: border-box;
    }

    .navigator>ul {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
        gap: 10px;
        justify-content: center;
        align-items: center;
    }

    .nav-btn,
    .nav-control {
        display: flex;
        justify-content: space-between;
        width: 100%;
        background-color: transparent;
        border: none;
        color: #fff;
        cursor: pointer;
        font-size: 16px;
        display: flex;
        align-items: center;
        gap: 1px;
    }

    .nav-btn:hover,
    .dropdown-item:hover {
        color: #00ff00;
    }

    .dropdown {
        position: relative;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        background-color: #333;
        border: 1px solid #555;
        padding: 5px 0;
        list-style: none;
        z-index: 10;
        min-width: 300px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .dropdown-menu li {
        padding: 5px 15px;
        background-color: #444;
        height: 40px;
        display: flex;
        justify-content: flex-start;
        align-items: center;
    }

    .dropdown-menu li:hover {
        background-color: #666;
    }

    .dropdown-item {
        background: none;
        border: none;
        color: #fff;
        width: 100%;
        text-align: left;
        cursor: pointer;
    }

    @* .dropdown:hover .dropdown-menu,
    .dropdown-menu:hover {
        display: block !important;
    } *@

    @@media (max-width: 768px) {
        .navigator {
            flex-direction: column;
            height: auto;
            align-items: flex-start;
            padding: 10px;
        }

        .navigator>ul {
            flex-direction: column;
            width: 100%;
            gap: 5px;
        }

        .navigator>ul li {
            width: 100%;
        }

        .dropdown-menu {
            position: static;
            box-shadow: none;
            border: none;
            background-color: transparent;
            padding: 0;
        }

        .dropdown-menu li {
            padding: 10px 0;
            border-bottom: 1px solid #555;
            padding-left: 10px;
        }

    @* .dropdown:hover .dropdown-menu {
            display: none !important;
        } *@

        .dropdown-btn::after {
            content: '▼';
            font-size: 12px;
            margin-left: 5px;
        }
    }
</style>

<body>
    <script src="https://unpkg.com/three@0.139.2/build/three.min.js"></script>
    <script src="https://unpkg.com/three@0.139.2/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://unpkg.com/three@0.139.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://unpkg.com/three@0.139.2/examples/js/exporters/GLTFExporter.js"></script>


    <div id="mainContainer">
        <nav class="navigator">
            <ul>
                <li class="dropdown">
                    <button class="nav-btn dropdown-btn" onclick="toggleDropdown('fileDropdown')">
                        <span>File</span>
                    </button>
                    <ul class="dropdown-menu" id="fileDropdown">
                        <li>
                            <button id="saveDesignBtn" class="nav-btn" onclick="saveMeshList()">
                                Save Design
                            </button>
                        </li>
                        <li>
                            <label for="loadFileInput" class="nav-btn">Load Design</label>
                            <input type="file" id="loadFileInput" onchange="loadMeshList(event)"
                                style="display: none;" />
                        </li>
                        <li>
                            <a href="@Url.Action("CartItem", "Cart")" class="nav-btn" style="text-decoration: none;">
                                Close
                            </a>
                        </li>
                    </ul>
                </li>
                <li>
                    <button type="button" class="nav-btn" data-bs-toggle="modal" data-bs-target="#orderProductModal">
                        <span>Save Product</span>
                    </button>
                </li>

                <li>
                    <button onclick="openAssetSelector()" class="nav-btn">Add Asset</button>
                </li>

                <li class="dropdown">
                    <button class="nav-btn dropdown-btn" onclick="toggleDropdown('toolsDropdown')">
                        <span>Tools</span>
                    </button>
                    <ul class="dropdown-menu" id="toolsDropdown">
                        <li>
                            <div class="nav-control">
                                <label for="colorPickerBackground">Background:</label>
                                <input class="w-25" type="color" id="colorPickerBackground" value="#cccccc" />
                            </div>
                        </li>
                        <li>
                            <div class="nav-control">
                                <label for="moveSpeed">Movement Speed</label>
                                <div class="d-flex w-50">
                                    <button id="decreaseSpeed">-</button>
                                    <input type="number" id="moveSpeed" value="1" min="0.1" step="0.1"
                                        style="width: 100%;" />
                                    <button id="increaseSpeed">+</button>
                                </div>
                            </div>
                        </li>
                        <li>
                            <button id="resetBtn" class="nav-btn">
                                <span>Reset View</span>
                            </button>
                        </li>
                        <li>
                            <button id="toggleGrid" class="nav-btn">
                                <span>Toggle Grid</span>
                            </button>
                        </li>
                    </ul>
                </li>
                <li class="dropdown">
                    <button class="nav-btn dropdown-btn" onclick="toggleDropdown('meshListContainer')">
                        <span>Select Mesh</span>
                    </button>
                    <ul class="dropdown-menu" id="meshListContainer">
                    </ul>
                </li>
                <li>
                    <button id="unselectMeshBtn" class="nav-btn">
                        <span>Unselect Mesh</span>
                    </button>
                </li>
            </ul>
            <ul>
                <li>
                    <input type="color" id="colorPicker" value="#ffffff" />
                </li>
                <li>
                    <div id="coordsDisplay" style="
                        color: white;
                        font-size: 16px;
                        background-color: rgba(0, 0, 0, 0.6);
                        padding: 5px;
                        border-radius: 5px;
                    ">
                        X: 0 | Y: 0 | Z: 0
                    </div>
                </li>
            </ul>
        </nav>

        <div id="canvasContainer">
            <canvas id="myCanvas"></canvas>
        </div>
    </div>

    <div id="commandHelperContainer">
        <div id="commandHelper">
            <ul>
                <li><strong>Rotation:</strong></li>
                <li>R: Rotate Clockwise (Y)</li>
                <li>T: Rotate Counterclockwise (Y)</li>
                <li>Y: Rotate Clockwise (X)</li>
                <li>F: Rotate Counterclockwise (X)</li>
                <li>U: Rotate Clockwise (Z)</li>
                <li>J: Rotate Counterclockwise (Z)</li>
                <li><strong>Additional Rotation:</strong></li>
                <li>I: Rotate Forward (X-axis)</li>
                <li>K: Rotate Backward (X-axis)</li>
                <li>O: Rotate Clockwise (Z-axis)</li>
                <li>L: Rotate Counterclockwise (Z-axis)</li>
                <li><strong>Scaling:</strong></li>
                <li>+ (Plus): Increase Scale</li>
                <li>- (Minus): Decrease Scale</li>
            </ul>
        </div>
    </div>




    <div id="mobileControls">
        <button onclick="move('w')">Move Up (Y+)</button>
        <button onclick="move('s')">Move Down (Y-)</button>
        <button onclick="move('a')">Move Left (X-)</button>
        <button onclick="move('d')">Move Right (X+)</button>
        <button onclick="move('q')">Move Forward (Z+)</button>
        <button onclick="move('e')">Move Backward (Z-)</button>
        <button onclick="move('r')">Rotate Clockwise (Y)</button>
        <button onclick="move('t')">Rotate Counterclockwise (Y)</button>
        <button onclick="move('y')">Rotate Clockwise (X)</button>
        <button onclick="move('f')">Rotate Counterclockwise (X)</button>
        <button onclick="move('u')">Rotate Clockwise (Z)</button>
        <button onclick="move('j')">Rotate Counterclockwise (Z)</button>
        <button onclick="move('i')">Rotate Forward</button>
        <button onclick="move('k')">Rotate Backward</button>
        <button onclick="move('+')">Increase Scale (+)</button>
        <button onclick="move('-')">Decrease Scale (-)</button>
    </div>



    <div id="assetSelectorModal" class="modal">
        <div class="modal-content" style="background-color: #00000055 !important;">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <h1 class="h5 fw-bold mb-0 border-start border-3 border-danger ps-3">ADD ASSET</h1>
                <button type="button" class="btn-close" onclick="closeAssetSelector();"></button>
            </div>

            <div class="p-3">
                <div class="row g-2 align-items-center">
                    <div class="col-md-4">
                        <input type="text" id="searchInput" class="form-control form-control-sm"
                            placeholder="Search by name...">
                    </div>
                    <div class=" col-md-4">
                        <select id="categoryFilter" class="form-select form-select-sm" onchange="applyFilters()">
                            <option value="all">All Categories</option>
                            <option value="Flowers">Flowers</option>
                            <option value="Bouquet">Bouquet</option>
                            <option value="Ribbons">Ribbons</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button type="button" class="btn text-white btn-sm w-100"
                            style="background-color: #5f4b8b !important;" onclick="applyFilters()">
                            Filter
                        </button>
                    </div>
                </div>
            </div>

            <div class="asset-grid" id="assetGrid" style="margin-top: -5px;">
            </div>
        </div>
    </div>

    <div class="modal fade" id="orderProductModal" tabindex="-1" aria-labelledby="orderProductModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="orderProductModalLabel">Order Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="orderProductForm" asp-action="EditCustomItem" asp-controller="Home" method="post"
                        enctype="multipart/form-data">
                        <input type="hidden" name="ids" value="@ids" />
                        <input type="hidden" name="customization" id="customization" />
                        <input type="hidden" name="total" id="total" />
                        <input type="file" id="glbFile" name="glbFile" accept=".glb" style="display:none" />
                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="productName"
                                placeholder="Enter product name" value="@name" required>
                        </div>
                        <div class="mb-3">
                            <label for="quantity" class="form-label">Quantity</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" min="1"
                                placeholder="Enter quantity" value="@quantity" required>
                        </div>
                        <div class="mb-3">
                            <label for="note" class="form-label">Note</label>
                            <textarea class="form-control" id="note" name="note" rows="3"
                                placeholder="Enter any notes for the order">@note</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" id="addToCart" class="btn btn-primary" form="orderProductForm"
                        data-bs-dismiss="modal">Save Edit</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var orderProductModal = document.getElementById('orderProductModal');
            orderProductModal.addEventListener('show.bs.modal', function (event) {
                unSelectMesh();
            });
        });

        function applyFilters() {
            const searchQuery = document.getElementById('searchInput').value;
            const categoryFilter = document.getElementById('categoryFilter').value;

            fetch(`/Home/GetAssets?searchQuery=${searchQuery}&categoryFilter=${categoryFilter}`)
                .then(response => response.json())
                .then(assets => {
                    displayAssets(assets);
                })
                .catch(error => {
                    console.error('Error fetching assets:', error);
                });
        }

        function displayAssets(assets) {
            const assetGrid = document.getElementById('assetGrid');
            assetGrid.innerHTML = '';

            if (assets.length === 0) {
                const noAssetsCard = document.createElement('div');
                noAssetsCard.classList.add('col');
                noAssetsCard.innerHTML = `
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">No Assets Found</h5>
                    <p class="card-text" style="color: #777;">There are no assets that match your filter criteria.</p>
                </div>
            </div>
            `;
                assetGrid.appendChild(noAssetsCard);
            } else {
                assets.forEach(asset => {
                    const assetCard = document.createElement('div');
                    assetCard.classList.add('col');
                    assetCard.innerHTML = `
                    <div class="card">
                        <model-viewer src="${asset.model3DLink}" style="width: 100%; height: 200px;" camera-controls
                            auto-rotate alt="3D Model of ${asset.name}"></model-viewer>
                        <div class="card-body">
                            <h5 class="card-title text-center">${asset.name}</h5>
                            <p class="card-text text-center" style="color: #777;">Price: ₱${asset.price}</p>
                            <button class="btn w-100 text-white" style="background-color: #5f4b8b !important;"
                                onclick="addAssetToScene('${asset.id}', '${asset.model3DLink}', '${asset.name}', '${asset.price}')">
                                Add to Scene
                            </button>
                        </div>
                    </div>
                `;
                    assetGrid.appendChild(assetCard);
                });
            }
        }
        applyFilters();
    </script>



</body>

</html>
<script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>


<script>
    let scene,
        camera,
        renderer,
        model,
        controls,
        selectedMesh,
        gridHelper,
        originalSize,
        meshes = [];

    let selectedOutline = null;
    let xHelper, yHelper, zHelper;
    let dLabel, sLabel, qLabel, aLabel, wLabel, eLabel;
    let raycaster,
        mouse,
        isDragging = false,
        offset = new THREE.Vector3();
    let moveSpeed = 1;

    function toggleCommandHelper() {
        const commandHelper = document.getElementById("commandHelper");
        const toggleButton = document.getElementById("toggleCommandHelper");

        if (commandHelper.classList.contains("hidden")) {
            commandHelper.classList.remove("hidden");
            toggleButton.textContent = "-";
        } else {
            commandHelper.classList.add("hidden");
            toggleButton.textContent = "+";
        }
    }

    function toggleDropdown(dropdownId) {
        if (dropdownId !== "meshListContainer") document.getElementById("meshListContainer").style.display = "none";
        if (dropdownId !== "toolsDropdown") document.getElementById("toolsDropdown").style.display = "none";
        if (dropdownId !== "fileDropdown") document.getElementById("fileDropdown").style.display = "none";

        const dropdownMenu = document.getElementById(dropdownId);
        if (dropdownMenu.style.display === 'block') {
            dropdownMenu.style.display = 'none';
        } else {
            dropdownMenu.style.display = 'block';

        }
    }

    function openAssetSelector() {
        document.getElementById("assetSelectorModal").style.display = "flex";
    }

    function closeAssetSelector() {
        document.getElementById("assetSelectorModal").style.display = "none";
    }

    function init() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(
            75,
            window.innerWidth / window.innerHeight,
            0.1,
            1000
        );
        camera.position.set(0, 0, 50);
        camera.fov = 75;
        camera.updateProjectionMatrix();
        scene.add(camera);

        renderer = new THREE.WebGLRenderer({
            antialias: true,
            canvas: document.querySelector("#myCanvas"),
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        const gridSize = 50;
        const divisions = 50;

        gridHelper = new THREE.GridHelper(gridSize, divisions);
        gridHelper.material.linewidth = 2;
        gridHelper.setColors(0x888888, 0x444444);
        scene.add(gridHelper);
        camera.position.y = 10;
        camera.position.z = 10;
        camera.position.x = 10;

        raycaster = new THREE.Raycaster();
        mouse = new THREE.Vector2();

        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.maxPolarAngle = Math.PI * 0.5;
        controls.minDistance = 0.1;
        controls.maxDistance = 100;
        controls.autoRotate = false;

        scene.add(new THREE.AmbientLight(0xcccccc, 1));

        const light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(10, 10, 10);
        scene.add(light);
        scene.background = new THREE.Color(0xeeeeee);


        window.addEventListener('resize', onWindowResize);
        window.addEventListener("keydown", onKeyDown);
        animate();
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
    }


    function saveMeshList() {
        const meshData = meshes.map(mesh => {
            return {
                id: mesh.id,
                name: mesh.name,
                price: mesh.price,
                position: mesh.position.toArray(),
                rotation: mesh.rotation.toArray(),
                scale: mesh.scale.toArray(),
                modelLink: mesh.modelLink
            };
        });

        const jsonString = JSON.stringify(meshData);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const link = document.createElement('a');

        link.href = URL.createObjectURL(blob);
        link.download = 'meshes.json';
        link.click();
    }

    function loadMeshList(event) {
        const file = event.target.files[0];
        const reader = new FileReader();

        reader.onload = function (e) {
            const data = e.target.result;
            loadMeshListCustomization(data);
            event.target.value = '';
        };
        reader.readAsText(file);
    }

    function loadMeshListCustomization(customization) {
        const meshData = JSON.parse(customization);

        clearExistingMeshes();
        meshData.forEach(mesh => {
            const loader = new THREE.GLTFLoader();
            loader.load(mesh.modelLink, function (gltf) {
                const model = gltf.scene;
                model.id = mesh.id;
                model.name = mesh.name;
                model.price = mesh.price;
                model.modelLink = mesh.modelLink;
                model.position.set(...mesh.position);
                model.rotation.set(...mesh.rotation);
                model.scale.set(...mesh.scale);
                scene.add(model);

                meshes.push(model);
                updateMeshList();
            });
        });
    }

    function clearExistingMeshes() {
        meshes.forEach(mesh => {
            scene.remove(mesh);
        });
        meshes.length = 0;
        updateMeshList();
        unSelectMesh();
    }



    function updateMeshList() {
        const meshListContainer = document.getElementById("meshListContainer");
        meshListContainer.innerHTML = "";

        meshes.forEach((mesh, index) => {
            const meshItem = document.createElement("li");
            meshItem.classList.add("mesh-item");
            meshItem.textContent = mesh.name || `Mesh ${index + 1}`;

            meshItem.addEventListener("click", () => {
                onMeshClick(mesh, meshItem);
                setActiveMeshItem(meshItem);
            });

            meshItem.addEventListener("dblclick", () => {
                renameMesh(mesh, meshItem);
            });

            meshListContainer.appendChild(meshItem);
        });
    }

    function setActiveMeshItem(activeItem) {
        const allMeshItems = document.querySelectorAll(".mesh-item");
        allMeshItems.forEach(item => item.style.backgroundColor = "");

        activeItem.style.backgroundColor = "green";
    }

    function renameMesh(mesh, meshItem) {
        const currentName = mesh.name || `Mesh ${meshes.indexOf(mesh) + 1}`;
        const newName = prompt("Enter new name for the mesh:", currentName);

        if (newName && newName.trim() !== "") {
            mesh.name = newName.trim();
            meshItem.textContent = newName.trim();
        }
    }


    function deleteMesh(mesh, meshItem) {
        scene.remove(mesh);

        const meshIndex = meshes.indexOf(mesh);
        if (meshIndex !== -1) {
            meshes.splice(meshIndex, 1);
        }

        updateMeshList();
        unSelectMesh();
    }

    function onMeshClick(mesh, meshItem) {
        if (selectedMesh) {
            if (xHelper) scene.remove(xHelper);
            if (yHelper) scene.remove(yHelper);
            if (zHelper) scene.remove(zHelper);

            if (dLabel) scene.remove(dLabel);
            if (sLabel) scene.remove(sLabel);
            if (qLabel) scene.remove(qLabel);
            if (wLabel) scene.remove(wLabel);
            if (eLabel) scene.remove(eLabel);
            if (aLabel) scene.remove(aLabel);
        }
        selectedMesh = mesh;
        const size = 10;
        const arrowHeadLength = 2;
        const arrowHeadWidth = 1;

        xHelper = new THREE.ArrowHelper(
            new THREE.Vector3(1, 0, 0),
            selectedMesh.position,
            size,
            0xff0000,
            arrowHeadLength,
            arrowHeadWidth
        );
        yHelper = new THREE.ArrowHelper(
            new THREE.Vector3(0, 1, 0),
            selectedMesh.position,
            size,
            0x00ff00,
            arrowHeadLength,
            arrowHeadWidth
        );
        zHelper = new THREE.ArrowHelper(
            new THREE.Vector3(0, 0, 1),
            selectedMesh.position,
            size,
            0x0000ff,
            arrowHeadLength,
            arrowHeadWidth
        );

        scene.add(xHelper);
        scene.add(yHelper);
        scene.add(zHelper);

        dLabel = createLabel("D", 0xff0000);
        wLabel = createLabel("W", 0x00ff00);
        qLabel = createLabel("Q", 0x0000ff);
        aLabel = createLabel("A", 0xff0000);
        sLabel = createLabel("S", 0x00ff00);
        eLabel = createLabel("E", 0x0000ff);

        dLabel.position.set(selectedMesh.position.x + size + 1, selectedMesh.position.y, selectedMesh.position.z);
        sLabel.position.set(selectedMesh.position.x, selectedMesh.position.y - size - 1, selectedMesh.position.z);
        qLabel.position.set(selectedMesh.position.x, selectedMesh.position.y, selectedMesh.position.z + size + 1);
        aLabel.position.set(selectedMesh.position.x - size - 1, selectedMesh.position.y, selectedMesh.position.z);
        wLabel.position.set(selectedMesh.position.x, selectedMesh.position.y + size + 1, selectedMesh.position.z);
        eLabel.position.set(selectedMesh.position.x, selectedMesh.position.y, selectedMesh.position.z - size - 1);

        scene.add(dLabel);
        scene.add(sLabel);
        scene.add(qLabel);
        scene.add(aLabel);
        scene.add(wLabel);
        scene.add(eLabel);

        if (selectedOutline) {
            scene.remove(selectedOutline);
            selectedOutline = null;
        }
        addSphere(selectedMesh.position);
    }

    function createLabel(text, color) {
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");
        canvas.width = 256;
        canvas.height = 256;

        context.fillStyle = `#${color.toString(16).padStart(6, "0")}`;
        context.font = "128px Arial";
        context.textAlign = "center";
        context.textBaseline = "middle";
        context.fillText(text, canvas.width / 2, canvas.height / 2);

        const texture = new THREE.CanvasTexture(canvas);
        const material = new THREE.SpriteMaterial({ map: texture, transparent: true });
        const sprite = new THREE.Sprite(material);

        sprite.scale.set(3, 3, 3);
        return sprite;
    }

    function unSelectMesh() {
        if (selectedMesh) {
            if (xHelper) scene.remove(xHelper);
            if (yHelper) scene.remove(yHelper);
            if (zHelper) scene.remove(zHelper);

            if (dLabel) scene.remove(dLabel);
            if (sLabel) scene.remove(sLabel);
            if (qLabel) scene.remove(qLabel);
            if (wLabel) scene.remove(wLabel);
            if (eLabel) scene.remove(eLabel);
            if (aLabel) scene.remove(aLabel);

            if (selectedOutline) {
                scene.remove(selectedOutline);
                selectedOutline = null;
            }

            selectedMesh = null;
            updateMeshList();
        }
    }

    function move(move) {
        if (!selectedMesh) return;

        const step = moveSpeed;
        let scaleValue = selectedMesh.scale.x;

        switch (move) {
            case "+":
            case "=":
                scaleValue += step * 10;
                break;
            case "-":
                scaleValue -= step * 10;
                break;
            case "w":
                selectedMesh.position.y += step;
                break;
            case "s":
                selectedMesh.position.y -= step;
                break;
            case "a":
                selectedMesh.position.x -= step;
                break;
            case "d":
                selectedMesh.position.x += step;
                break;
            case "q":
                selectedMesh.position.z += step;
                break;
            case "e":
                selectedMesh.position.z -= step;
                break;

            case "r":
                selectedMesh.rotation.y -= step;
                break;
            case "t":
                selectedMesh.rotation.y += step;
                break;
            case "y":
                selectedMesh.rotation.x -= step;
                break;
            case "f":
                selectedMesh.rotation.x += step;
                break;
            case "u":
                selectedMesh.rotation.z -= step;
                break;
            case "j":
                selectedMesh.rotation.z += step;
                break;

            case "i":
                selectedMesh.rotation.x -= step;
                break;
            case "k":
                selectedMesh.rotation.x += step;
                break;
            case "o":
                selectedMesh.rotation.z -= step;
                break;
            case "l":
                selectedMesh.rotation.z += step;
                break;

            case "Escape":
                unSelectMesh();
                break;
            case "Delete":
                deleteMesh(selectedMesh);
                break;
        }

        scaleValue = Math.max(0.1, Math.min(50, scaleValue));
        selectedMesh.scale.set(scaleValue, scaleValue, scaleValue);


        if (xHelper) xHelper.position.copy(selectedMesh.position);
        if (yHelper) yHelper.position.copy(selectedMesh.position);
        if (zHelper) zHelper.position.copy(selectedMesh.position);

        const size = 10;
        if (dLabel) dLabel.position.set(selectedMesh.position.x + size + 1, selectedMesh.position.y, selectedMesh.position.z);
        if (dLabel) sLabel.position.set(selectedMesh.position.x, selectedMesh.position.y - size - 1, selectedMesh.position.z);
        if (dLabel) qLabel.position.set(selectedMesh.position.x, selectedMesh.position.y, selectedMesh.position.z + size + 1);
        if (dLabel) aLabel.position.set(selectedMesh.position.x - size - 1, selectedMesh.position.y, selectedMesh.position.z);
        if (dLabel) wLabel.position.set(selectedMesh.position.x, selectedMesh.position.y + size + 1, selectedMesh.position.z);
        if (dLabel) eLabel.position.set(selectedMesh.position.x, selectedMesh.position.y, selectedMesh.position.z - size - 1);
        updateCoordsDisplay();

        if (selectedOutline) {
            scene.remove(selectedOutline);
            selectedOutline = null;
        }
        addSphere(selectedMesh.position);
    }

    function onKeyDown(event) {
        move(event.key);
    }

    function updateCoordsDisplay() {
        const coordsDisplay = document.getElementById("coordsDisplay");
        const { x, y, z } = selectedMesh.position;
        coordsDisplay.textContent = `X: ${x.toFixed(
            2
        )} | Y: ${y.toFixed(2)} | Z: ${z.toFixed(2)}`;
    }

    // function changeColor() {
    //  if (selectedMesh) {
    //      if (selectedMesh.isMesh) {
    //          selectedMesh.material.color.setHex(
    //              Math.random() * 0xffffff
    //          );
    //      } else {
    //          selectedMesh.traverse((child) => {
    //              if (child.isMesh) {
    //                  child.material.color.setHex(
    //                      Math.random() * 0xffffff
    //                  );
    //              }
    //          });
    //      }
    //  }
    // }

    // function addRibbonMesh() {
    //  const loader = new THREE.GLTFLoader();
    //  loader.load("/ribbon.glb", (gltf) => {
    //      model = gltf.scene;
    //      model.scale.set(1, 1, 1);
    //      model.position.set(0, 0, 0);
    //      scene.add(model);

    //      model.traverse((child) => {
    //          if (child.isMesh) {
    //              meshes.push(child);
    //          }
    //      });

    //      updateMeshList();
    //      console.log("Model Loaded Successfully");
    //  });
    // }

    function addRibbonMesh() {
        const loader = new THREE.GLTFLoader();
        loader.load("/models/ribbon.glb", (gltf) => {
            const model = gltf.scene;
            model.scale.set(1, 1, 1);
            model.position.set(0, 0, 0);

            model.traverse((child) => {
                if (child.isMesh) {
                    child.position.set(0, 0, 0);
                    // meshes.push(child);
                }
            });

            scene.add(model);
            meshes.push(model);
            model.updateMatrixWorld();
            updateMeshList();
        });
    }

    function addBouquet() {
        // const geometry = new THREE.BoxGeometry(5, 5, 5);
        // const material = new THREE.MeshLambertMaterial({
        //  color: 0x00ff00,
        // });
        // const cube = new THREE.Mesh(geometry, material);
        // cube.position.set(0, 0, 0);
        // scene.add(cube);
        // meshes.push(cube);
        // updateMeshList();
        const loader = new THREE.GLTFLoader();
        loader.load("/models/bouquet.glb", (gltf) => {
            model = gltf.scene;
            model.scale.set(0.1, 0.1, 0.1);
            model.position.set(0, 0, 0);

            model.traverse((child) => {
                if (child.isMesh) {
                    // meshes.push(child);
                    child.position.set(0, 0, 0);
                }
            });
            scene.add(model);
            meshes.push(model);
            model.updateMatrixWorld();

            updateMeshList();
            console.log("Model Loaded Successfully");
        });
    }

    // function addBouquet() {
    //  const loader = new THREE.GLTFLoader();
    //  loader.load("/bouquet.glb", (gltf) => {
    //      const model = gltf.scene;
    //      model.scale.set(0.1, 0.1, 0.1);
    //      model.position.set(0, 0, 0);

    //      model.traverse((child) => {
    //          if (child.isMesh) {
    //              child.material = new THREE.MeshLambertMaterial({
    //                  color: 0xffffff,
    //              });
    //          }
    //      });

    //      scene.add(model);

    //      const group = new THREE.Group();
    //      group.add(model);
    //      scene.add(group);

    //      meshes.push(model);

    //      selectedMesh = model;
    //      updateMeshList();

    //      console.log("Model Loaded Successfully");
    //  });
    // }

    function addSphere(position) {
        let meshRadius = 3;
        const box = new THREE.Box3().setFromObject(selectedMesh);
        const size = box.getSize(new THREE.Vector3());
        meshRadius = Math.max(size.x, size.y, size.z) / 2;

        const geometry = new THREE.SphereGeometry(meshRadius, 32, 32);
        const wireframeGeometry = new THREE.WireframeGeometry(geometry);
        const material = new THREE.LineBasicMaterial({
            color: 0x00ff11,
            transparent: true,
            opacity: 0.3,
        });

        selectedOutline = new THREE.LineSegments(wireframeGeometry, material);
        const adjustedPosition = position.clone();
        adjustedPosition.y += size.y / 2;


        selectedOutline.position.copy(adjustedPosition);
        selectedOutline.scale.set(1, 1, 1);
        scene.add(selectedOutline);
    }



    const decreaseSpeedButton = document.getElementById("decreaseSpeed");
    const increaseSpeedButton = document.getElementById("increaseSpeed");
    const moveSpeedInput = document.getElementById("moveSpeed");

    decreaseSpeedButton.addEventListener("click", () => {
        moveSpeed = Math.max(0.1, moveSpeed - 0.1);
        moveSpeedInput.value = moveSpeed.toFixed(1);
    });

    increaseSpeedButton.addEventListener("click", () => {
        moveSpeed += 0.1;
        moveSpeedInput.value = moveSpeed.toFixed(1);
    });

    moveSpeedInput.addEventListener("input", () => {
        moveSpeed = parseFloat(moveSpeedInput.value);
        if (isNaN(moveSpeed)) {
            moveSpeed = 1;
        }
        moveSpeedInput.value = moveSpeed.toFixed(1);
    });

    document
        .getElementById("colorPicker")
        .addEventListener("input", function (event) {
            if (selectedMesh) {
                const selectedColor = event.target.value;
                if (selectedMesh.isMesh) {
                    selectedMesh.material.color.set(selectedColor);
                } else {
                    selectedMesh.traverse((child) => {
                        if (child.isMesh) {
                            child.material.color.set(selectedColor);
                        }
                    });
                }
            }
        });

    document
        .getElementById("colorPickerBackground")
        .addEventListener("input", function (event) {
            scene.background = new THREE.Color(event.target.value);
        });

    document
        .getElementById("resetBtn")
        .addEventListener("click", () => {
            camera.position.y = 10;
            camera.position.z = 10;
            camera.position.x = 10;
            camera.fov = 75;
            controls.update();
        });

    document
        .getElementById("toggleGrid")
        .addEventListener("click", () => {
            if (scene.children.includes(gridHelper)) {
                scene.remove(gridHelper);
            } else {
                scene.add(gridHelper);
            }
        });
    @* const scaleSlider = document.getElementById("scaleSlider");
        scaleSlider.addEventListener("input", () => {
            if (selectedMesh) {
                const scaleValue = parseFloat(scaleSlider.value);
                selectedMesh.scale.set(scaleValue, scaleValue, scaleValue);
            }
        }); *@
        document
            .getElementById("unselectMeshBtn")
            .addEventListener("click", unSelectMesh);
    @* document
            .getElementById("addBouquetBtn")
            .addEventListener("click", addBouquet); *@
        // document
        //  .getElementById("addSphereBtn")
        //  .addEventListener("click", addSphere);
    @* document
                .getElementById("addRibbonBtn")
                .addEventListener("click", addRibbonMesh); *@

    @* document
            .getElementById("addFlower")
            .addEventListener("click", function () {
                const selector = document.getElementById(
                    "flowerModelSelector"
                );
                selector.style.display =
                    selector.style.display === "none" ? "block" : "none";

                if (
                    document.getElementById("flowerModelList").children
                        .length === 0
                ) {
                    const flowerModels = [
                        {
                            name: "Flower 1",
                            modelPath: "/models/blue_tulips_low_poly.glb",
                        },
                        {
                            name: "Flower 2",
                            modelPath: "/models/papa_meilland_rose.glb",
                        },
                        {
                            name: "Flower 3",
                            modelPath: "/models/dried_yellow_rose.glb",
                        },
                    ];

                    const modelList =
                        document.getElementById("flowerModelList");

                    flowerModels.forEach((flower) => {
                        const listItem = document.createElement("li");
                        listItem.textContent = flower.name;
                        listItem.addEventListener("click", function () {
                            addFlowerToScene(flower.modelPath, flower.name);
                        });
                        modelList.appendChild(listItem);
                    });
                }
            });

        document
            .getElementById("closeFlowerSelector")
            .addEventListener("click", function () {
                const selector = document.getElementById(
                    "flowerModelSelector"
                );
                selector.style.display = "none";
            }); *@

        function addFlowerToScene(modelPath, name) {
            const loader = new THREE.GLTFLoader();
            loader.load(modelPath, function (gltf) {
                const model = gltf.scene;
                model.name = name;
                model.scale.set(30, 30, 30);
                model.position.set(0, 0, 0);
                scene.add(model);
                meshes.push(model);
                model.updateMatrixWorld();
                selectedMesh = model;
                updateMeshList();
                console.log("Flower model added to the scene");
            });
        }

    function addAssetToScene(id, modelLink, name, price) {
        const loader = new THREE.GLTFLoader();
        loader.load(modelLink, function (gltf) {
            const model = gltf.scene;
            model.id = id;
            model.name = name;
            model.price = price;
            model.modelLink = modelLink;

            model.scale.set(1, 1, 1);
            scene.add(model);
            meshes.push(model);
            updateMeshList();
        });
    }

    @* document.getElementById('saveGlbBtn').addEventListener('click', function () {
            scene.remove(gridHelper);
            const exporter = new THREE.GLTFExporter();
            exporter.parse(scene, function (result) {
                const blob = new Blob([result], { type: 'application/octet-stream' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'model.glb';
                link.click();
            }, { binary: true });

            scene.add(gridHelper);
        }); *@
    @* 
        document.getElementById('saveGlbBtn').addEventListener('click', function () {
            scene.remove(gridHelper);

            const exporter = new THREE.GLTFExporter();
            exporter.parse(scene, function (result) {
                const blob = new Blob([result], { type: 'application/octet-stream' });
                const file = new File([blob], 'model.glb', { type: 'application/octet-stream' });

                const glbFileInput = document.getElementById('glbFile');
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                glbFileInput.files = dataTransfer.files;

                document.getElementById('cartForm').submit();
            }, { binary: true });
            scene.add(gridHelper);
        }); *@

        document.getElementById('addToCart').addEventListener('click', function () {
            scene.remove(gridHelper);
            unSelectMesh();

            const customization = meshes.map(mesh => {
                return {
                    id: mesh.id,
                    name: mesh.name,
                    price: mesh.price,
                    position: mesh.position.toArray(),
                    rotation: mesh.rotation.toArray(),
                    scale: mesh.scale.toArray(),
                    modelLink: mesh.modelLink
                };
            });
            const customizationString = JSON.stringify(customization);
            document.getElementById('customization').value = customizationString;

            const total = meshes.reduce((total, mesh) => {
                return total + parseFloat(mesh.price);
            }, 0);
            document.getElementById('total').value = total;
    @* document.getElementById('orderProductForm').submit(); *@

            const exporter = new THREE.GLTFExporter();
            exporter.parse(scene, function (result) {
                const blob = new Blob([result], { type: 'application/octet-stream' });
                const file = new File([blob], 'model.glb', { type: 'application/octet-stream' });

                const glbFileInput = document.getElementById('glbFile');
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                glbFileInput.files = dataTransfer.files;
                document.getElementById('orderProductForm').submit();
            }, { binary: true });
            scene.add(gridHelper);
        });

    init();
    loadMeshListCustomization('@customizationData');


</script>
@* @if (TempData["Customization"] != null)
{
    <script>
        loadMeshListCustomization('@customizationData');
    </script>
} *@

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    $(document).ready(function () {
    @if (TempData["SuccessMessage"] != null)
    {
        <text>
                    Swal.fire({
                        icon: 'success',
                    title: 'Success',
                    text: '@TempData["SuccessMessage"]',
                    showConfirmButton: false,
                    timer: 3000
                                                                                                                                                                                                                                                            });
        </text>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <text>
                    Swal.fire({
                        icon: 'error',
                    title: 'Error',
                    text: '@TempData["ErrorMessage"]',
                    showConfirmButton: true
                                                                                                                                                    });
        </text>
    }
    });
</script>